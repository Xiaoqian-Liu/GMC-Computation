TotalIters = as.integer(0)
sol=.C("test_fasta2", x0 = x0, y = y, A_data = A_data, Z_data = Z_data, n = n, p = p,
var_hat = xhat, param = param, group = group, K = K,
lambda = lambda, tau1 = tau1, max_iters = max_iters, w = w,
backtrack = backtrack, recordIterates = recordIterates,
stepsizeShrink = stepsizeShrink, eps_n = eps_n,
bestObjectiveIterate = bestObjectiveIterate, objective = objective,
fVals = fVals, totalBacktracks = totalBacktracks, residual = residual,
taus = taus, iterates_data = iterates_data, TotalIters = TotalIters)
x = sol$bestObjectiveIterate
i = sol$TotalIters
objective = sol$objective[1:(i+1)]
fVals = sol$fVals[1:i]
totalBacktracks = sol$totalBacktracks
residual = sol$residual[1:i]
taus = sol$taus[1:i]
if(recordIterates){
iterates = matrix(data = sol$iterates[1:p*(i+1)], nrow = p)
}else{
iterates = NULL
}
return(list(x=x, objective=objective, fVals=fVals,
totalBacktracks=totalBacktracks,
residual=residual, taus=taus, iterates=iterates))
}
n=10
p=6
y = rnorm(n)
A = matrix(data=rnorm(n*p), nrow = n)
x = rnorm(p)
xhat = rep(0, p)
Z = 0.8*t(A)%*%A/n
param = 1
group <- c(1,2,1,2,3,3)
#x = rnorm(length(group))
#x= c(1, 5, 1, 5, 2, 2)
K = rep(sqrt(2), 3)
lambda = 0
x0 <- rnorm(p)
sol_R2 <- fasta_fg2(F2, gradF2, g, proxg, x0, y, A, Z, xhat, param, group, K, lambda,
tau1=5, max_iters = 100, w = 10,  backtrack = TRUE, recordIterates = FALSE,
stepsizeShrink = 0.5, eps_n = 1e-15)
sol_C2 <- fasta_fg2_c(x0, y, A, Z, xhat, param, group, K, lambda,
tau1=5, max_iters = 100, w = 10,  backtrack = TRUE, recordIterates = FALSE,
stepsizeShrink = 0.5, eps_n = 1e-15)
round(sol_C2$x, 14) == round(sol_R2$x, 14)
round(sol_C2$objective, 14) == round(sol_R2$objective, 14)
round(sol_C2$residual, 14) == round(sol_R2$residual, 14)
################# Good! ####################
adaptive_pdhg_grGMC <- function(x, v, y, A, Z, group, K, lambda, maxiters=1e3, tol = 1e-3,
adaptive = TRUE, backtrack = TRUE, L, tau, sigma,
a = 0.5, eta = 0.95,  Delta = 2, gamma = 0.75, b=0.95,
stopRule = "ratioResidual"){
# Approximate  the  reciprical spectral radius of Z'Z
if(missing(L)){
set.seed(1234)
xr = rnorm(length(x))
Zx = Z%*%xr
ZtZx = t(Z)%*%Zx
L = 2*norm(Zx, "2")/norm(ZtZx, "2")
}
if(missing(tau)){
tau = sqrt(L)
}
if(missing(sigma)){
sigma = L/tau
}
# Allocate space for the returned variables in the 'outs' list
outs = list()
outs$tau = rep(0, maxiters)   # primal stepsize
outs$sigma = rep(0, maxiters) # dual stepsize
outs$p = rep(0, maxiters)     # primal residuals
outs$d = rep(0, maxiters)     # dual stepsize
# Initialize some values
updates = 0
Zx = Z%*%x
Ztv = t(Z)%*%v
maxPrimal = -Inf
maxDual = -Inf
#  Begin iteration
for (iter in 1:maxiters) {
# store old iterates
x0 = x
v0  = v
Zx0 = Zx
Ztv0 = Ztv
#  primal update
tau = as.numeric(tau)  # to fit the format
xhat = x- tau*Ztv
res1 = fasta_fg1(F1, gradF1, g, proxg, x0 = xhat, y, A, Z, xhat, param=tau, group, K, lambda,
tau1=5, max_iters = 100, w = 10,  backtrack = TRUE, recordIterates = FALSE,
stepsizeShrink = 0.5, eps_n = 1e-15)
x = res1$x
Zx = Z%*%x
Zxh = 2*Zx - Zx0
# dual update
sigma = as.numeric(sigma)
vhat = v + sigma*Zxh
res2 <- fasta_fg2(F2, gradF2, g, proxg, x0 = vhat, y, A, Z, vhat, param=sigma, group, K, lambda,
tau1=5, max_iters = 100, w = 10,  backtrack = TRUE, recordIterates = FALSE,
stepsizeShrink = 0.5, eps_n = 1e-15)
v = res2$x
Ztv = t(Z)%*%v
# compute and store residuals
dx = x -x0
dv = v - v0
r1 = dx/tau + Ztv0
r2  = Ztv
d1 =  dv/sigma + Zxh
d2 =  Zx
primal = norm(r1 - r2, "2")
dual =  norm(d1 - d2, "2")
maxPrimal  = max(primal, maxPrimal)
maxDual = max(dual, maxDual)
outs$p[iter] = primal
outs$d[iter] =  dual
# store various values that we wish to track
outs$tau[iter] = tau
outs$sigma[iter] = sigma
### Test stopping conditions
if(stopRule == "ratioResidual"){
stop = primal/maxPrimal < tol & dual/maxDual < tol
}
if(stopRule == "residual"){
stop = primal < tol & dual < tol
}
if(stopRule == "iteration"){
stop = iter> maxiters
}
# stopping rule satisfied
if ((stop & iter > 5) | iter>=maxiters){
outs$x = x
outs$v = v
outs$p = outs$p[1:iter]
outs$d = outs$d[1:iter]
outs$updates = updates
outs$tau = outs$tau[1:iter]
outs$sigma = outs$sigma[1:iter]
outs$iters = iter
}
###  Test the backtracking/stability condition
Zxv = 2*t(Zx - Zx0)%*%dv
Hnorm = norm(dx, "2")^2/tau + norm(dv, "2")^2/sigma
if(backtrack & gamma*Hnorm < Zxv){
x = x0
v = v0
Zx = Zx0
Ztv = Ztv0
decay = b * gamma * Hnorm / Zxv
tau = tau*decay
sigma = sigma*decay
L = L *decay^2
}
### perform adaptive update
if(adaptive & iter>1 & max(primal, dual) < max(outs$p[iter-1], outs$d[iter-1])){
if (primal > Delta*dual){
tau = tau/(1-a)
sigma = L /tau
a = a*eta
updates = updates+1
}
if(primal < dual/Delta){
tau = tau *(1-a)
sigma = L/tau
a = a*eta
updates = updates +1
}
} #end adaptive
} # end iteration
return(outs)
}
source("~/Documents/GitHub/Group-GMC/Debug.R")
source("~/Documents/GitHub/Group-GMC/Debug_fasta.R")
source("~/Documents/GitHub/Group-GMC/adaptive_pdhg_grGMC.R")
library(Matrix)
set.seed(1234)
## set the ture signal
x_star=c(10, 10, 0, 0)
p=length(x_star)
##group the variables
group=c(1, 1, 2, 2)
##set sample size
n=5
## generate the covariate matrix
A=matrix(rnorm(n*p, mean = 1, sd=0.1), nrow = n)
theta = 0.8
Z = 0.8*t(A)%*%A/n
## set the group weights
gp=unique(group)
J=length(gp)
K=rep(0,J)
for (j in 1:J) {
K[j]=sqrt(length(which(group==gp[j])))
}
## response vector
y=as.vector(A%*%x_star+rnorm(n, mean=0, sd = 0.1))
lambda=0
## set initial values
x0=v0=double(p)
sol3 <- adaptive_pdhg_grGMC(x0, v0,  y, A, Z, group, K, lambda,  maxiters=1e3, tol = 1e-3,
adaptive = TRUE, backtrack = TRUE, tau=5, sigma=5,
a = 0.5, eta = 0.95,  Delta = 2, gamma = 0.75, b=0.95,
stopRule = "ratioResidual")
obj(y, A, Z, beta=sol3$x, v=sol3$v, group, K, lambda)
Fprox <- function(xhat, tau){
x0 = rnorm(length(xhat))
res <- fasta_fg1(F1, gradF1, g, proxg, x0, y=Y, A=X, Z=A, xhat, param=tau, group, K, lambda,
tau1=5, max_iters = 100, w = 10,  backtrack = TRUE, recordIterates = FALSE,
stepsizeShrink = 0.5, eps_n = 1e-15)
return(res$x)
}
Gprox <- function(yhat, sigma){
y0 = rnorm(length(yhat))
res <- fasta_fg2(F2, gradF2, g, proxg, y0, y=Y, A=X, Z=A, yhat, param=sigma, group, K, lambda,
tau1=5, max_iters = 100, w = 10,  backtrack = TRUE, recordIterates = FALSE,
stepsizeShrink = 0.5, eps_n = 1e-15)
return(res$x)
}
# the objective value of group GMC
obj <- function(y, A, Z, beta,  v, group, K, lambda){
n <- nrow(A)
p <- ncol(A)
s1 <- norm(y-A%*%beta, "2")^2/(2*n)
s2 <- 0
s3 <- 0
g <- unique(group)
J <- length(K)
for (j in 1:J) {
ind <- which(group==g[j])
pj <- length(ind)
Dj <- Matrix(0, nrow = pj, ncol = p, sparse = TRUE)
for (i in 1:pj) {
Dj[i, ind[i]] <- 1
}
s2 <- s2+ K[j]*norm(Dj%*%beta, "2")
s3 <- s3+ K[j]*norm(Dj%*%v, "2")
}
s4 <- as.numeric(t(beta-v)%*%Z%*%(beta-v)/2)
s <- as.numeric(s1+lambda*s2-lambda*s3-s4)
return(s)
}
obj(y, A, Z, beta=sol3$x, v=sol3$v, group, K, lambda)
library(grpgmc)
fit_GMC <- grGMC(y=y, A=A, theta=theta, group=group, lambda=lambda, group.multiplier=K, maxiters=1e3)
fit_GMC$beta
sol3$x
#source("~/0Project/Project 2/Computation/obj_grGMC.R")
source("~/Documents/GitHub/grpgmc/R/pdhg.R")
setwd("~/Documents/GitHub/grpgmc/src")
dyn.load("grpgmc.so")
#' Adaptive PDHG algorithm for group GMC
#'
#' @param x The initial value for variable x, if missing, set a as zero vector
#' @param v The initial value for variable v, if missing, set as zero vector
#' @param y The response variable
#' @param A The A matrix in PDHG
#' @param Z The Z matrix in PDHG
#' @param group A vector describing the grouping of the coefficients.
#' @param K The weight vector for the group penalty or called group multiplier
#' @param lambda The tunning parameter in PDHG
#' @param maxiters The max number of iteration
#' @param tol The relative decrease in the residuals before the method stops
#' @param adaptive If 'TRUE' then use adaptive method.
#'                  If 'FALSE', turn off the adaptivity and users must set tau and
#'                  sigma as the setpsize for the classical pdhg
#' @param backtrack If 'TRUE' then use backtracking method.
#' @param tau  The intial stepsize for the primal variables
#' @param sigma The intial stepsize for the dual variables
#' @param a  Intial adaptive update strength for stepsizes
#' @param eta  How fast does the adaptivity level decay
#' @param Delta Update stepsizes when primal/dual ratio exceeds Delta
#' @param gamma Used to determine when need to backtrack to maintain positivity conditions
#' @param b Adaptivity parameter used for backtracking update
#' @param stopRule Three choices in total. Default is ratioResidual
#'            "ratioResidual": primal/maxPrimal<tol & dual/maxDual < tol
#'            "residual": primal < tol & dual < tol
#'            "iteration" iter > maxiters
#' @param ShowTime Whether to show the time cost for computing the solution
#' @useDynLib grpgmc
pdhg_new <- function(x, v, y, A, Z, group, K, lambda, maxiters = 1e3, tol = 1e-3,
adaptive = TRUE, backtrack = TRUE, tau = 5, sigma = 5,
a = 0.5, eta = 0.95, Delta = 2, gamma = 0.75, b=0.95,
stopRule = "ratioResidual", ShowTime=FALSE){
# Approximate  the  reciprical spectral radius of A'A
set.seed(1234)
xr = rnorm(length(x))
Zx = Z%*%xr
ZtZx = t(Z)%*%Zx
L = 2*norm(Zx, "2")/norm(ZtZx, "2")
if(missing(x)){
if(missing(v)){
x <- v <- rep(0, ncol(A))
}else{
x <- v
}
}
storage.mode(x) <- "double"
storage.mode(v) <- "double"
y <- as.vector(y)
storage.mode(y) <- "double"
A_data <- as.vector(A)
Z_data <- as.vector(Z)
storage.mode(A_data) <- "double"
storage.mode(Z_data) <- "double"
n <- as.integer(nrow(A))
p <-  as.integer(ncol(A))
storage.mode(lambda) <- "double"
group <- as.integer(group)
storage.mode(K) <- "double"
maxiters <- as.integer(maxiters)
tol <- as.double(tol)
adaptive <- as.integer(adaptive)
backtrack <- as.integer(backtrack)
tau <- as.double(tau)
sigma <- as.double(sigma)
L <- as.double(L)
a <- as.double(a)
eta <- as.double(eta)
Delta <- as.double(Delta)
gamma <- as.double(gamma)
b <- as.double(b)
if(stopRule == "ratioResidual"){
Stoprule <- 1
}
if(stopRule == "residual"){
Stoprule <- 2
}
if(stopRule == "iteration"){
stopRule <- 3
}
Stoprule <- as.integer(Stoprule)
estimate_of_x <- double(p)
estimate_of_v <- double(p)
Num_of_iters <- as.integer(0)
Presidual <- double(maxiters)
Dresidual <- double(maxiters)
tau_seq <- double(maxiters)
sigma_seq <- double(maxiters)
updates <- as.integer(0)
time <- proc.time()
sol=.C("test_PDHG", x = x, v = v, y = y, A_data = A_data, Z_data = Z_data, n = n, p = p,
group = group, K = K, lambda = lambda, maxiters = maxiters, tol = tol, adaptive = adaptive,
backtrack = backtrack, tau = tau, sigma = sigma, L =L, a = a, eta = eta, Delta = Delta,
gamma = gamma, b = b, stopRule = Stoprule, estimate_of_x = estimate_of_x,
estimate_of_v = estimate_of_v, Num_of_iters = Num_of_iters, Presidual = Presidual,
Dresidual = Dresidual, tau_seq = tau_seq, sigma_seq = sigma_seq, updates = updates,
PACKAGE = "grpgmc")
if(ShowTime){
print(proc.time()-time)
}
iters <- sol$Num_of_iters
outs <- list()
outs$x <- sol$estimate_of_x
outs$v <- sol$estimate_of_v
outs$tau <- sol$tau_seq[1:iters]
outs$sigma <- sol$sigma_seq[1:iters]
outs$p <- sol$Presidual[1:iters]
outs$d <- sol$Dresidual[1:iters]
outs$iters <- sol$Num_of_iters
outs$updates <- sol$updates
return(outs)
}
sol_c <- pdhg_new(x0, v0, y, A, Z, group, K, lambda, maxiters = 1e3, tol = 1e-3,
adaptive = TRUE, backtrack = TRUE, tau = 5, sigma = 5,
a = 0.5, eta = 0.95, Delta = 2, gamma = 0.75, b=0.95,
stopRule = "ratioResidual", ShowTime=FALSE)
all(round(sol_c$x, 5) == round(sol3$x, 5))
obj(y, A, Z, beta=sol_c$x, v=sol_c$v, group, K, lambda)
obj(y, A, Z, beta=sol3$x, v=sol3$v, group, K, lambda)
sol_c <- pdhg_new(x0, v0, y, A, Z, group, K, lambda, maxiters = 5e3, tol = 1e-3,
adaptive = TRUE, backtrack = TRUE, tau = 5, sigma = 5,
a = 0.5, eta = 0.95, Delta = 2, gamma = 0.75, b=0.95,
stopRule = "ratioResidual", ShowTime=FALSE)
all(round(sol_c$x, 5) == round(sol3$x, 5))
obj(y, A, Z, beta=sol_c$x, v=sol_c$v, group, K, lambda)
adaptive_pdhg_grGMC <- function(x, v, y, A, Z, group, K, lambda, maxiters=1e3, tol = 1e-3,
adaptive = TRUE, backtrack = TRUE, L, tau, sigma,
a = 0.5, eta = 0.95,  Delta = 2, gamma = 0.75, b=0.95,
stopRule = "ratioResidual"){
# Approximate  the  reciprical spectral radius of Z'Z
if(missing(L)){
set.seed(1234)
xr = rnorm(length(x))
Zx = Z%*%xr
ZtZx = t(Z)%*%Zx
L = 2*norm(Zx, "2")/norm(ZtZx, "2")
}
if(missing(tau)){
tau = sqrt(L)
}
if(missing(sigma)){
sigma = L/tau
}
# Allocate space for the returned variables in the 'outs' list
outs = list()
outs$tau = rep(0, maxiters)   # primal stepsize
outs$sigma = rep(0, maxiters) # dual stepsize
outs$p = rep(0, maxiters)     # primal residuals
outs$d = rep(0, maxiters)     # dual stepsize
# Initialize some values
updates = 0
Zx = Z%*%x
Ztv = t(Z)%*%v
maxPrimal = -Inf
maxDual = -Inf
#  Begin iteration
for (iter in 1:maxiters) {
# store old iterates
x0 = x
v0  = v
Zx0 = Zx
Ztv0 = Ztv
#  primal update
tau = as.numeric(tau)  # to fit the format
xhat = x- tau*Ztv
res1 = fasta_fg1(F1, gradF1, g, proxg, x0 = xhat, y, A, Z, xhat, param=tau, group, K, lambda,
tau1=5, max_iters = 1000, w = 10,  backtrack = TRUE, recordIterates = FALSE,
stepsizeShrink = 0.5, eps_n = 1e-15)
x = res1$x
Zx = Z%*%x
Zxh = 2*Zx - Zx0
# dual update
sigma = as.numeric(sigma)
vhat = v + sigma*Zxh
res2 <- fasta_fg2(F2, gradF2, g, proxg, x0 = vhat, y, A, Z, vhat, param=sigma, group, K, lambda,
tau1=5, max_iters = 1000, w = 10,  backtrack = TRUE, recordIterates = FALSE,
stepsizeShrink = 0.5, eps_n = 1e-15)
v = res2$x
Ztv = t(Z)%*%v
# compute and store residuals
dx = x -x0
dv = v - v0
r1 = dx/tau + Ztv0
r2  = Ztv
d1 =  dv/sigma + Zxh
d2 =  Zx
primal = norm(r1 - r2, "2")
dual =  norm(d1 - d2, "2")
maxPrimal  = max(primal, maxPrimal)
maxDual = max(dual, maxDual)
outs$p[iter] = primal
outs$d[iter] =  dual
# store various values that we wish to track
outs$tau[iter] = tau
outs$sigma[iter] = sigma
### Test stopping conditions
if(stopRule == "ratioResidual"){
stop = primal/maxPrimal < tol & dual/maxDual < tol
}
if(stopRule == "residual"){
stop = primal < tol & dual < tol
}
if(stopRule == "iteration"){
stop = iter> maxiters
}
# stopping rule satisfied
if ((stop & iter > 5) | iter>=maxiters){
outs$x = x
outs$v = v
outs$p = outs$p[1:iter]
outs$d = outs$d[1:iter]
outs$updates = updates
outs$tau = outs$tau[1:iter]
outs$sigma = outs$sigma[1:iter]
outs$iters = iter
}
###  Test the backtracking/stability condition
Zxv = 2*t(Zx - Zx0)%*%dv
Hnorm = norm(dx, "2")^2/tau + norm(dv, "2")^2/sigma
if(backtrack & gamma*Hnorm < Zxv){
x = x0
v = v0
Zx = Zx0
Ztv = Ztv0
decay = b * gamma * Hnorm / Zxv
tau = tau*decay
sigma = sigma*decay
L = L *decay^2
}
### perform adaptive update
if(adaptive & iter>1 & max(primal, dual) < max(outs$p[iter-1], outs$d[iter-1])){
if (primal > Delta*dual){
tau = tau/(1-a)
sigma = L /tau
a = a*eta
updates = updates+1
}
if(primal < dual/Delta){
tau = tau *(1-a)
sigma = L/tau
a = a*eta
updates = updates +1
}
} #end adaptive
} # end iteration
return(outs)
}
sol3 <- adaptive_pdhg_grGMC(x0, v0,  y, A, Z, group, K, lambda,  maxiters=1e3, tol = 1e-3,
adaptive = TRUE, backtrack = TRUE, tau=5, sigma=5,
a = 0.5, eta = 0.95,  Delta = 2, gamma = 0.75, b=0.95,
stopRule = "ratioResidual")
obj(y, A, Z, beta=sol3$x, v=sol3$v, group, K, lambda)
sol3 <- adaptive_pdhg_grGMC(x0, v0,  y, A, Z, group, K, lambda,  maxiters=5e3, tol = 1e-3,
adaptive = TRUE, backtrack = TRUE, tau=5, sigma=5,
a = 0.5, eta = 0.95,  Delta = 2, gamma = 0.75, b=0.95,
stopRule = "ratioResidual")
obj(y, A, Z, beta=sol3$x, v=sol3$v, group, K, lambda)
sol_c <- pdhg_new(x0, v0, y, A, Z, group, K, lambda, maxiters = 5e3, tol = 1e-3,
adaptive = TRUE, backtrack = TRUE, tau = 5, sigma = 5,
a = 0.5, eta = 0.95, Delta = 2, gamma = 0.75, b=0.95,
stopRule = "ratioResidual", ShowTime=FALSE)
obj(y, A, Z, beta=sol_c$x, v=sol_c$v, group, K, lambda)
