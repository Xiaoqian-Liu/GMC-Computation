A <- matrix(rnorm(n*p, mean = 1, sd=1), nrow = n)
## response vector
y <- as.vector(A%*%x_star+rnorm(n, mean=0, sd = 1))
theta <- 0.9
Z <-  theta*t(A)%*%A/n
lambda <- c(0, 10^seq(-3, 1, length.out = 19))
## set initial values
x0=v0=double(p)
beta_diff <- rep(0, length(lambda))
obj_reldiff <- rep(0, length(lambda))
res_pdhg <- grGMC(y=y, A=A, theta, group=group, lambda=0,
group.multiplier=K, max_iter=1e4, tol=1e-15, returnX = TRUE)
b_pdhg <- as.vector(res_pdhg$beta)
X_pdhg <- res_pdhg$XG$X  #  check the X  and y are same
y_pdhg <- res_pdhg$y
res_socp <- grGMC_socp(y, A, theta, group, lambda=0, K, tol=1e-15, maxiters = 1e6,
x0, v0, df.method="group", returnX=TRUE, ShowTime=TRUE)
b_socp <- as.vector(res_socp$beta)
X_socp <- res_socp$XG$X
y_socp <- res_socp$y
beta_diff[1] <- max(abs(b_pdhg - b_socp ))
obj_reldiff[1] <- abs(res_socp$obj-res_pdhg$obj)/res_pdhg$obj
res_socp$obj
res_pdhg$obj
library(devtools)
document()
load_all()
library(grpgmc)
source("~/0Project/Project 2/grpreg_/R/G.R")
source("~/0Project/Project 2/grpreg_/R/multi.R")
source("~/0Project/Project 2/grpreg_/R/newXG.R")
source("~/0Project/Project 2/grpreg_/R/newY.R")
source("~/0Project/Project 2/grpreg_/R/orthogonalize.R")
source("~/0Project/Project 2/grpreg_/R/standardize.R")
source("~/0Project/Project 2/Computation/obj_grGMC.R")
source("~/0Project/Project 2/Computation/socp_new.R")
source("~/0Project/Project 2/Computation/grGMC_socp.R")
source("~/0Project/Project 2/Computation/grGMC_pdhg.R")
source("~/0Project/Project 2/Computation/gconj.R")
#library(grGMC)
library(MASS)
library(gurobi)
library(grpgmc)
library(glmnet)
n <- 50
## set the ture signal
p <- 10
x_star <- rep(0, p)
x_star[1:2] <- 1
x_star[3:4] <- -1
##group the variables
#group <- rep(1:5, each = 2)
group <- 1:10
gp <- unique(group)
J <- length(gp)
K <- rep(0,J)
for (j in 1:J) {
K[j] <- sqrt(length(which(group==gp[j])))
}
set.seed(2021)
#================ Full-rank design ===============%
A <- matrix(rnorm(n*p, mean = 1, sd=1), nrow = n)
## response vector
y <- as.vector(A%*%x_star+rnorm(n, mean=0, sd = 1))
theta <- 0.9
Z <-  theta*t(A)%*%A/n
lambda <- c(0, 10^seq(-3, 1, length.out = 19))
## set initial values
x0=v0=double(p)
beta_diff <- rep(0, length(lambda))
obj_reldiff <- rep(0, length(lambda))
res_pdhg <- grGMC(y=y, A=A, theta, group=group, lambda=0,
group.multiplier=K, maxiters=1e4, tol=1e-15, returnX = TRUE)
b_pdhg <- as.vector(res_pdhg$beta)
X_pdhg <- res_pdhg$XG$X  #  check the X  and y are same
y_pdhg <- res_pdhg$y
res_socp <- grGMC_socp(y, A, theta, group, lambda=0, K, tol=1e-15, maxiters = 1e6,
x0, v0, df.method="group", returnX=TRUE, ShowTime=TRUE)
b_socp <- as.vector(res_socp$beta)
X_socp <- res_socp$XG$X
y_socp <- res_socp$y
beta_diff[1] <- max(abs(b_pdhg - b_socp ))
obj_reldiff[1] <- abs(res_socp$obj-res_pdhg$obj)/res_pdhg$obj
res_pdhg <- grGMC(y=y, A=A, theta, group=group, lambda[2:13],
group.multiplier=K, maxiters=1e4, tol=1e-15, returnX = TRUE)
b_pdhg <- as.vector(res_pdhg$beta)
res_socp <- grGMC_socp(y, A, theta, group, lambda[2:13], K, tol=1e-12, maxiters = 1e6,
x0, v0, df.method="group", returnX=TRUE, ShowTime=TRUE)
b_socp <- as.vector(res_socp$beta)
for (j in 1:12) {
a1 = res_pdhg$beta[, j]
a2 = res_socp$beta[, j]
beta_diff[j+1] <- max(abs(a1 - a2))
obj_reldiff[j+1] <- abs(res_socp$obj[j]-res_pdhg$obj[j])/res_pdhg$obj[j]
}
res_pdhg <- grGMC(y=y, A=A, theta, group=group, lambda[14],
group.multiplier=K, maxiters=1e4, tol=1e-15, returnX = TRUE)
b_pdhg <- as.vector(res_pdhg$beta)
res_socp <- grGMC_socp(y, A, theta, group, lambda[14], K, tol=1e-11, maxiters = 1e6,
x0, v0, df.method="group", returnX=TRUE, ShowTime=TRUE)
b_socp <- as.vector(res_socp$beta)
beta_diff[14] <- max(abs(b_pdhg - b_socp ))
obj_reldiff[14] <- abs(res_socp$obj-res_pdhg$obj)/res_pdhg$obj
res_pdhg <- grGMC(y=y, A=A, theta, group=group, lambda[15],
group.multiplier=K, maxiters=1e4, tol=1e-15, returnX = TRUE)
b_pdhg <- as.vector(res_pdhg$beta)
res_socp <- grGMC_socp(y, A, theta, group, lambda[15], K, tol=1e-13, maxiters = 1e6,
x0, v0, df.method="group", returnX=TRUE, ShowTime=TRUE)
b_socp <- as.vector(res_socp$beta)
beta_diff[15] <- max(abs(b_pdhg - b_socp ))
obj_reldiff[15] <- abs(res_socp$obj-res_pdhg$obj)/res_pdhg$obj
res_pdhg <- grGMC(y=y, A=A, theta, group=group, lambda[16:20],
group.multiplier=K, maxiters=1e4, tol=1e-15, returnX = TRUE)
b_pdhg <- as.vector(res_pdhg$beta)
res_socp <- grGMC_socp(y, A, theta, group, lambda[16:20], K, tol=1e-12, maxiters = 1e6,
x0, v0, df.method="group", returnX=TRUE, ShowTime=TRUE)
b_socp <- as.vector(res_socp$beta)
for (j in 1:5) {
a1 = res_pdhg$beta[, j]
a2 = res_socp$beta[, j]
beta_diff[j+15] <- max(abs(a1 - a2))
obj_reldiff[j+15] <- abs(res_socp$obj[j]-res_pdhg$obj[j])/res_pdhg$obj[j]
}
plot(c(0, log10(lambda[2:20])), log10(beta_diff), type = "b")
plot(lambda, beta_diff, type = "b",
main = "Relative Difference in beta, full-rank design")
plot(lambda, obj_reldiff, type = "b",
main = "Relative Difference in objective, full-rank design")
res_pdhg$obj
res_pdhg <- grGMC(y=y, A=A, theta, group=group, lambda[2:13],
group.multiplier=K, maxiters=1e4, tol=1e-15, returnX = TRUE)
b_pdhg <- as.vector(res_pdhg$beta)
res_socp <- grGMC_socp(y, A, theta, group, lambda[2:13], K, tol=1e-12, maxiters = 1e6,
x0, v0, df.method="group", returnX=TRUE, ShowTime=TRUE)
b_socp <- as.vector(res_socp$beta)
for (j in 1:12) {
a1 = res_pdhg$beta[, j]
a2 = res_socp$beta[, j]
beta_diff[j+1] <- max(abs(a1 - a2))
obj_reldiff[j+1] <- abs(res_socp$obj[j]-res_pdhg$obj[j])/res_pdhg$obj[j]
}
res_socp$obj
res_pdhg$obj
library(devtools)
document()
laod_a
laod_all
load_all()
library(grpgmc)
source("~/0Project/Project 2/grpreg_/R/G.R")
source("~/0Project/Project 2/grpreg_/R/multi.R")
source("~/0Project/Project 2/grpreg_/R/newXG.R")
source("~/0Project/Project 2/grpreg_/R/newY.R")
source("~/0Project/Project 2/grpreg_/R/orthogonalize.R")
source("~/0Project/Project 2/grpreg_/R/standardize.R")
source("~/0Project/Project 2/Computation/obj_grGMC.R")
source("~/0Project/Project 2/Computation/socp_new.R")
source("~/0Project/Project 2/Computation/grGMC_socp.R")
source("~/0Project/Project 2/Computation/grGMC_pdhg.R")
source("~/0Project/Project 2/Computation/gconj.R")
#library(grGMC)
library(MASS)
library(gurobi)
library(grpgmc)
library(glmnet)
n <- 50
## set the ture signal
p <- 10
x_star <- rep(0, p)
x_star[1:2] <- 1
x_star[3:4] <- -1
##group the variables
#group <- rep(1:5, each = 2)
group <- 1:10
gp <- unique(group)
J <- length(gp)
K <- rep(0,J)
for (j in 1:J) {
K[j] <- sqrt(length(which(group==gp[j])))
}
set.seed(2021)
#================ Full-rank design ===============%
A <- matrix(rnorm(n*p, mean = 1, sd=1), nrow = n)
## response vector
y <- as.vector(A%*%x_star+rnorm(n, mean=0, sd = 1))
theta <- 0.9
Z <-  theta*t(A)%*%A/n
lambda <- c(0, 10^seq(-3, 1, length.out = 19))
## set initial values
x0=v0=double(p)
beta_diff <- rep(0, length(lambda))
obj_reldiff <- rep(0, length(lambda))
res_pdhg <- grGMC(y=y, A=A, theta, group=group, lambda=0,
group.multiplier=K, maxiters=1e4, tol=1e-15, returnX = TRUE)
b_pdhg <- as.vector(res_pdhg$beta)
X_pdhg <- res_pdhg$XG$X  #  check the X  and y are same
y_pdhg <- res_pdhg$y
res_socp <- grGMC_socp(y, A, theta, group, lambda=0, K, tol=1e-15, maxiters = 1e6,
x0, v0, df.method="group", returnX=TRUE, ShowTime=TRUE)
b_socp <- as.vector(res_socp$beta)
X_socp <- res_socp$XG$X
y_socp <- res_socp$y
beta_diff[1] <- max(abs(b_pdhg - b_socp ))
obj_reldiff[1] <- abs(res_socp$obj-res_pdhg$obj)/res_pdhg$obj
res_pdhg <- grGMC(y=y, A=A, theta, group=group, lambda[2:13],
group.multiplier=K, maxiters=1e4, tol=1e-15, returnX = TRUE)
b_pdhg <- as.vector(res_pdhg$beta)
res_socp <- grGMC_socp(y, A, theta, group, lambda[2:13], K, tol=1e-12, maxiters = 1e6,
x0, v0, df.method="group", returnX=TRUE, ShowTime=TRUE)
b_socp <- as.vector(res_socp$beta)
res_pdhg <- grGMC(y=y, A=A, theta, group=group, lambda[2:13],
group.multiplier=K, maxiters=1e3, tol=1e-15, returnX = TRUE)
b_pdhg <- as.vector(res_pdhg$beta)
res_socp <- grGMC_socp(y, A, theta, group, lambda[2:13], K, tol=1e-12, maxiters = 1e3,
x0, v0, df.method="group", returnX=TRUE, ShowTime=TRUE)
b_socp <- as.vector(res_socp$beta)
for (j in 1:12) {
a1 = res_pdhg$beta[, j]
a2 = res_socp$beta[, j]
beta_diff[j+1] <- max(abs(a1 - a2))
obj_reldiff[j+1] <- abs(res_socp$obj[j]-res_pdhg$obj[j])/res_pdhg$obj[j]
}
obj_reldiff
res_pdhg <- grGMC(y=y, A=A, theta, group=group, lambda[2:13],
group.multiplier=K, maxiters=1e2, tol=1e-15, returnX = TRUE)
b_pdhg <- as.vector(res_pdhg$beta)
res_socp <- grGMC_socp(y, A, theta, group, lambda[2:13], K, tol=1e-12, maxiters = 1e2,
x0, v0, df.method="group", returnX=TRUE, ShowTime=TRUE)
b_socp <- as.vector(res_socp$beta)
res_socp <- grGMC_socp(y, A, theta, group, lambda[2:13], K, tol=1e-12, maxiters = 1e3,
x0, v0, df.method="group", returnX=TRUE, ShowTime=TRUE)
b_socp <- as.vector(res_socp$beta)
for (j in 1:12) {
a1 = res_pdhg$beta[, j]
a2 = res_socp$beta[, j]
beta_diff[j+1] <- max(abs(a1 - a2))
obj_reldiff[j+1] <- abs(res_socp$obj[j]-res_pdhg$obj[j])/res_pdhg$obj[j]
}
obj_reldiff
res_socp$obj
res_pdhg$obj
res_pdhg <- grGMC(y=y, A=A, theta, group=group, lambda[2:13],
group.multiplier=K, maxiters=1e2, tol=1e-15, returnX = TRUE)
b_pdhg <- as.vector(res_pdhg$beta)
for (j in 1:12) {
a1 = res_pdhg$beta[, j]
a2 = res_socp$beta[, j]
beta_diff[j+1] <- max(abs(a1 - a2))
obj_reldiff[j+1] <- abs(res_socp$obj[j]-res_pdhg$obj[j])/res_pdhg$obj[j]
}
obj_reldiff
set.seed(1234)
## set the ture signal
x_star=c(0, 3, 9, 0, 0, 15, 0, 4, 5, 0)
p=length(x_star)
##group the variables
group=c(2, 1, 1, 3, 2, 1, 3, 4, 4, 3)
##set sample size
n=15
## generate the covariate matrix
A=matrix(rnorm(n*p, mean = 1, sd=1), nrow = n)
## set the group weights
gp=unique(group)
J=length(gp)
K=rep(0,J)
for (j in 1:J) {
K[j]=sqrt(length(which(group==gp[j])))
}
## response vector
y=as.vector(A%*%x_star+rnorm(n, mean=0, sd = 0.5))
lambda= seq(1e-3, 1, length.out=20)
## fit with cv.grGMC function
time <- proc.time()
fit_GMC <- cv.grGMC(y, A, theta=0.9, group, lambda, K, nfolds = 5, maxiters = 1e3)
print(proc.time() - time)
time <- proc.time()
fit_GMC_socp <- cv.grGMC_socp(y, A, theta=0.9, group, lambda, K, nfolds = 5, maxiters = 1e3)
print(proc.time() - time)
time <- proc.time()
fit_GMC <- cv.grGMC(y, A, theta=0.9, group, lambda, K, nfolds = 5, maxiters = 1e2)
print(proc.time() - time)
time <- proc.time()
fit_GMC_socp <- cv.grGMC_socp(y, A, theta=0.9, group, lambda, K, nfolds = 5, maxiters = 1e2)
print(proc.time() - time)
fit_GMC$cve
fit_GMC_socp$cve
time <- proc.time()
fit_GMC <- cv.grGMC(y, A, theta=0.9, group, lambda, K, nfolds = 5, maxiters = 1e3)
print(proc.time() - time)
time <- proc.time()
fit_GMC_socp <- cv.grGMC_socp(y, A, theta=0.9, group, lambda, K, nfolds = 5, maxiters = 1e3)
print(proc.time() - time)
fit_GMC$cve
fit_GMC_socp$cve
time <- proc.time()
fit_GMC <- cv.grGMC(y, A, theta=0.9, group, lambda, K, nfolds = 5, maxiters = 1e4)
print(proc.time() - time)
time <- proc.time()
fit_GMC_socp <- cv.grGMC_socp(y, A, theta=0.9, group, lambda, K, nfolds = 5, maxiters = 1e4)
print(proc.time() - time)
fit_GMC_socp$cve
fit_GMC$cve
x0 <- v0 <- rep(0, p)
grGMC(y, A, theta = 0.9, group, lambda, K, x0, v0, maxiters = 1e3, tol = 1e-3, ShowTime = TRUE)
res_socp <- grGMC_socp(y, A, theta = 0.9, group, lambda, K, maxiters = 1e3, tol = 1e-3, ShowTime = TRUE)
res_pdhg <- grGMC(y, A, theta = 0.9, group, lambda, K, x0, v0, maxiters = 1e3, tol = 1e-3, ShowTime = TRUE)
res_pdhg$obj
res_socp$obj
res_socp$obj-res_pd
res_socp$obj-res_pdhg$obj
res_pdhg <- grGMC(y, A, theta = 0.9, group, lambda, K, x0, v0, maxiters = 1e4, tol = 1e-10, ShowTime = TRUE)
res_socp <- grGMC_socp(y, A, theta = 0.9, group, lambda, K, maxiters = 1e4, tol = 1e-10, ShowTime = TRUE)
res_socp <- grGMC_socp(y, A, theta = 0.9, group, lambda, K, maxiters = 1e4, tol = 1e-8, ShowTime = TRUE)
res_socp$obj-res_pdhg$obj
time <- proc.time()
fit_GMC <- cv.grGMC(y, A, theta=0.9, group, lambda, K, nfolds = 5, maxiters = 1e4, tol = 1e-10)
print(proc.time() - time)
time <- proc.time()
fit_GMC_socp <- cv.grGMC_socp(y, A, theta=0.9, group, lambda, K, nfolds = 5, maxiters = 1e4, tol = 1e-10)
print(proc.time() - time)
time <- proc.time()
fit_GMC_socp <- cv.grGMC_socp(y, A, theta=0.9, group, lambda, K, nfolds = 5, maxiters = 1e4, tol = 1e-9)
print(proc.time() - time)
fit_GMC$cve
fit_GMC_socp$cve
fit_GMC$min
fit_GMC_socp$min
fit_GMC$min_1se
fit_GMC_socp$min_1se
library(devtools)
document()
load_all()
document()
library(grpgmc)
r=5
set.seed(2020+r)
m <- 4
#rho <- rhoSeq[k]
rho <- 0.5
Sigma <- matrix(0, nrow = m, ncol = m)
for (i in 1:m) {
for (j in 1:m) {
Sigma[i,j] <- rho^abs(i-j)
}
}
n <- 100  #set sample size
Z <- mvrnorm(n=n, mu=rep(0, m), Sigma = Sigma)
for (i in 1:n) {
for(j in 1:m){
if(Z[i,j]<qnorm(1/3))
Z[i,j] <- 2
else if(Z[i,j]>qnorm(2/3))
Z[i,j] <- 1
else
Z[i,j] <- 0
}
}
Z <- apply(Z, 2, as.factor)
Z <- as.data.frame(Z)
name <- rep(0, m)
for (i in 1:m) {
name[i]=paste("Z", i, sep = "")
}
colnames(Z) <- name
A <- model.matrix(~.^2, data = Z)
group <- attr(A, "assign")[-1]
A <- A[,-1]
p <- ncol(A)
xstar <- rep(0, p)
xstar[1:4] <- c(3, 2, 3, 2)
xstar[which(group==(m+1))] <- c(1, 2, 1.5, 2.5)
P=which(xstar!=0)  # positive indices
NOP=length(P)   #number of positive
NON=p-NOP   #number of negative
# set  the signal-to-noise ratio
SNR <- 10
#compute the variance of epsilon
var <- t(xstar)%*%t(A)%*%A%*%xstar/(SNR*n)
y <- A%*%xstar+rnorm(n, sd=sqrt(var))
# y <- A%*%xstar+rnorm(n, sd=1)
# group <- rep(1:n, each=2)
g <- unique(group)
J <- length(g)
K <- rep(0,J)
for (j in 1:J) {
K[j] <- sqrt(length(which(group==g[j])))
}
theta <- 0.8
library(MASS)
library(glmnet)
set.seed(2020+r)
m <- 4
#rho <- rhoSeq[k]
rho <- 0.5
Sigma <- matrix(0, nrow = m, ncol = m)
for (i in 1:m) {
for (j in 1:m) {
Sigma[i,j] <- rho^abs(i-j)
}
}
n <- 100  #set sample size
Z <- mvrnorm(n=n, mu=rep(0, m), Sigma = Sigma)
for (i in 1:n) {
for(j in 1:m){
if(Z[i,j]<qnorm(1/3))
Z[i,j] <- 2
else if(Z[i,j]>qnorm(2/3))
Z[i,j] <- 1
else
Z[i,j] <- 0
}
}
Z <- apply(Z, 2, as.factor)
Z <- as.data.frame(Z)
name <- rep(0, m)
for (i in 1:m) {
name[i]=paste("Z", i, sep = "")
}
colnames(Z) <- name
A <- model.matrix(~.^2, data = Z)
group <- attr(A, "assign")[-1]
A <- A[,-1]
p <- ncol(A)
xstar <- rep(0, p)
xstar[1:4] <- c(3, 2, 3, 2)
xstar[which(group==(m+1))] <- c(1, 2, 1.5, 2.5)
P=which(xstar!=0)  # positive indices
NOP=length(P)   #number of positive
NON=p-NOP   #number of negative
# set  the signal-to-noise ratio
SNR <- 10
#compute the variance of epsilon
var <- t(xstar)%*%t(A)%*%A%*%xstar/(SNR*n)
y <- A%*%xstar+rnorm(n, sd=sqrt(var))
# y <- A%*%xstar+rnorm(n, sd=1)
# group <- rep(1:n, each=2)
g <- unique(group)
J <- length(g)
K <- rep(0,J)
for (j in 1:J) {
K[j] <- sqrt(length(which(group==g[j])))
}
theta <- 0.8
outLasso <- cv.grpreg(A, y, group=group, penalty = "grLasso",
nfolds=5, returnX = TRUE)
lambdaSeq <- outLasso$lambda
time <- proc.time()
outGMC <- grpgmc::cv.grGMC(y, A, theta =  theta, group = group, nfolds=5,
lambda = lambdaSeq, group.multiplier = K,  maxiters = 1e3)
print(proc.time()-time)
r=10
set.seed(2020+r)
m <- 4
#rho <- rhoSeq[k]
rho <- 0.5
Sigma <- matrix(0, nrow = m, ncol = m)
for (i in 1:m) {
for (j in 1:m) {
Sigma[i,j] <- rho^abs(i-j)
}
}
n <- 100  #set sample size
Z <- mvrnorm(n=n, mu=rep(0, m), Sigma = Sigma)
for (i in 1:n) {
for(j in 1:m){
if(Z[i,j]<qnorm(1/3))
Z[i,j] <- 2
else if(Z[i,j]>qnorm(2/3))
Z[i,j] <- 1
else
Z[i,j] <- 0
}
}
Z <- apply(Z, 2, as.factor)
Z <- as.data.frame(Z)
name <- rep(0, m)
for (i in 1:m) {
name[i]=paste("Z", i, sep = "")
}
colnames(Z) <- name
A <- model.matrix(~.^2, data = Z)
group <- attr(A, "assign")[-1]
A <- A[,-1]
p <- ncol(A)
xstar <- rep(0, p)
xstar[1:4] <- c(3, 2, 3, 2)
xstar[which(group==(m+1))] <- c(1, 2, 1.5, 2.5)
P=which(xstar!=0)  # positive indices
NOP=length(P)   #number of positive
NON=p-NOP   #number of negative
# set  the signal-to-noise ratio
SNR <- 10
#compute the variance of epsilon
var <- t(xstar)%*%t(A)%*%A%*%xstar/(SNR*n)
y <- A%*%xstar+rnorm(n, sd=sqrt(var))
# y <- A%*%xstar+rnorm(n, sd=1)
# group <- rep(1:n, each=2)
g <- unique(group)
J <- length(g)
K <- rep(0,J)
for (j in 1:J) {
K[j] <- sqrt(length(which(group==g[j])))
}
theta <- 0.8
outLasso <- cv.grpreg(A, y, group=group, penalty = "grLasso",
nfolds=5, returnX = TRUE)
lambdaSeq <- outLasso$lambda
time <- proc.time()
outGMC <- grpgmc::cv.grGMC(y, A, theta =  theta, group = group, nfolds=5,
lambda = lambdaSeq, group.multiplier = K,  maxiters = 1e3)
print(proc.time()-time)
install.packages("~/Documents/GitHub/groupGMC/code/grpgmc_0.8.0.tar.gz", repos = NULL, type = "source")
