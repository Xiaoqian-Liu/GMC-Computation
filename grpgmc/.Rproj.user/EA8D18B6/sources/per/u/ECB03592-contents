set.seed(2020+r)

m <- 4
#rho <- rhoSeq[k]
rho <- 0.5
Sigma <- matrix(0, nrow = m, ncol = m)
for (i in 1:m) {
  for (j in 1:m) {
    Sigma[i,j] <- rho^abs(i-j)
  }
}

n <- 100  #set sample size
Z <- mvrnorm(n=n, mu=rep(0, m), Sigma = Sigma)

for (i in 1:n) {
  for(j in 1:m){
    if(Z[i,j]<qnorm(1/3)) 
      Z[i,j] <- 2
    else if(Z[i,j]>qnorm(2/3))
      Z[i,j] <- 1
    else
      Z[i,j] <- 0
  }
}


Z <- apply(Z, 2, as.factor)
Z <- as.data.frame(Z)

name <- rep(0, m)
for (i in 1:m) {
  name[i]=paste("Z", i, sep = "")
}
colnames(Z) <- name


A <- model.matrix(~.^2, data = Z)
group <- attr(A, "assign")[-1]
A <- A[,-1]

p <- ncol(A)
xstar <- rep(0, p)
xstar[1:4] <- c(3, 2, 3, 2)
xstar[which(group==(m+1))] <- c(1, 2, 1.5, 2.5)


P=which(xstar!=0)  # positive indices
NOP=length(P)   #number of positive
NON=p-NOP   #number of negative


# set  the signal-to-noise ratio
SNR <- 10
#compute the variance of epsilon
var <- t(xstar)%*%t(A)%*%A%*%xstar/(SNR*n)
y <- A%*%xstar+rnorm(n, sd=sqrt(var))
# y <- A%*%xstar+rnorm(n, sd=1)


# group <- rep(1:n, each=2)
g <- unique(group)
J <- length(g)
K <- rep(0,J)
for (j in 1:J) {
  K[j] <- sqrt(length(which(group==g[j])))
}


theta <- 0.8

outLasso <- cv.grpreg(A, y, group=group, penalty = "grLasso", 
                      nfolds=5, returnX = TRUE)

lambdaSeq <- outLasso$lambda
time <- proc.time()
outGMC <- grpgmc::cv.grGMC(y, A, theta =  theta, group = group, nfolds=5, 
                           lambda = lambdaSeq, group.multiplier = K,  maxiters = 1e3)
print(proc.time()-time)
